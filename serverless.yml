service: cart-service

custom:
  stage: ${opt:stage, self:provider.stage}
  service: cart-service
  tableName: ${self:custom.stage}-cart
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: offline/migrations

provider:
  name: aws
  stage: dev
  runtime: nodejs12.x
  region: us-east-1
  tags:
    app: ${self:custom.service}
    env: ${self:custom.stage}
  deploymentBucket:
    name: terakart-artifacts
  apiGateway: #shared Gateway setting
    restApiId:
      "Fn::ImportValue": ${self:custom.stage}-sharedGW-restApiId
    restApiRootResourceId:
      "Fn::ImportValue": ${self:custom.stage}-sharedGW-rootResourceId
  environment:
    DYNAMODB_TABLE: ${self:custom.tableName}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - secretsmanager:GetSecretValue
      Resource: "arn:aws:secretsmanager:us-east-1:#{AWS::AccountId}:secret:/external/*"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

functions:
  getCart:
    handler: functions/get/handler.handler
    events:
      - http:
          path: cart/{cartid}
          method: get
          cors: true
  createCart:
    handler: functions/create/handler.handler
    events:
      - http:
          path: cart
          method: post
          cors: true

  updateCartItem:
    handler: functions/cartItem/update/handler.handler
    events:
      - http:
          path: cart/{cartid}/updateItem
          method: post
          cors: true
  
  deleteCart:
    handler: functions/delete/handler.handler
    events:
      - http:
          path: cart/{cartid}
          method: delete
          cors: true
  
  checkoutCart:
    handler: functions/checkout/index.handler
    environment:
      STRIPE_API_KEY: ${env:STRIPE_API_KEY}
    events:
      - http:
          path: cart/{cartid}/checkout
          method: get
          cors: true

  checkoutSession:
    handler: functions/checkout-session/index.handler
    environment:
      STRIPE_API_KEY: ${env:STRIPE_API_KEY}
    events:
      - http:
          path: cart/checkout-session/{sessionid}
          method: get
          cors: true

resources:
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}

plugins:
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-pseudo-parameters
  - serverless-dotenv-plugin